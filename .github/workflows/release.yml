name: Publish to Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize ]

permissions:
  contents: write

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Set up Go
        uses: actions/setup-go@master
        with:
          go-version: '1.20'

      - name: Get version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "当前版本号为 ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check if Go code compiles
        run: go mod tidy

      - name: Check if Go code passes tests
        run: go test -v

      - name: Check if Go code passes linting
        run: go vet

      - name: Run linting checks
        uses: golangci/golangci-lint-action@master
        with:
          version: latest

      - name: Check if Release exists
        id: check-release
        run: |
          RESPONSE=$(gh release view v${{ env.VERSION }} -R ${{ github.repository }} 2>&1 || true)
          if echo "$RESPONSE" | grep -q "Not Found"; then
            echo "Release v${{ env.VERSION }} does not exist. Skipping deletion."
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Release v${{ env.VERSION }} exists."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Delete Release if exists
        run: |
          set +e
          gh release delete v${{ env.VERSION }} -R ${{ github.repository }} -y --cleanup-tag
          if [ $? -eq 0 ]; then
            echo "Release v${{ env.VERSION }} deleted successfully."
          else
            echo "Failed to delete release v${{ env.VERSION }}."
          fi

      - name: Create Release with generated notes
        if: github.event_name == 'push'
        run: gh release create v${{ env.VERSION }} --generate-notes
